return {
  "yetone/avante.nvim",
  event = "VeryLazy",
  version = false, -- Set this to "*" to always pull the latest release version, or set it to false to update to the latest code changes.
  opts = {
    -- add any opts here
    -- for example
    -- provider = "openai",
    -- openai = {
    --   endpoint = "https://api.openai.com/v1",
    --   model = "gpt-4o", -- your desired model (or use gpt-4o, etc.)
    --   timeout = 30000, -- timeout in milliseconds
    --   temperature = 0, -- adjust if needed
    --   max_tokens = 4096,
    --   -- reasoning_effort = "high" -- only supported for reasoning models (o1, etc.)
    -- },
    file_selector = {
      --- @alias FileSelectorProvider "native" | "fzf" | "mini.pick" | "snacks" | "telescope" | string | fun(params: avante.file_selector.IParams|nil): nil
      provider = "fzf",
      -- Options override for custom providers
      provider_opts = {},
    },
    provider = "openrouter",
    cursor_applying_provider = "openrouter",
    behaviour = {
      auto_focus_sidebar = true,
      auto_suggestions = false, -- Experimental stage
      auto_suggestions_respect_ignore = false,
      auto_set_highlight_group = true,
      auto_set_keymaps = true,
      auto_apply_diff_after_generation = false,
      jump_result_buffer_on_finish = false,
      support_paste_from_clipboard = false,
      minimize_diff = true,
      enable_token_counting = true,
      -- XXX: the config seems deprecated
      -- new ref: https://github.com/yetone/avante.nvim/compare/f9aa754..6e1e2ac
      -- old ref: https://github.com/yetone/avante.nvim/blob/1c8cac1958cdf04b65942f23fa5a14cc4cfae44e/cursor-planning-mode.md?plain=1#L29
      -- enable_cursor_planning_mode = false,
      -- enable_claude_text_editor_tool_mode = false,
      use_cwd_as_project_root = false,
    },
    vendors = {
      openrouter = {
        -- __inherited_from = "openai",
        -- endpoint = "https://openrouter.ai/api/v1",
        -- api_key_name = "cmd:bw get notes openrouter-api-key",
        -- model = "deepseek/deepseek-r1:free",
        -- disable_tools = true,
        -- -- max_completion_tokens = 16384,
        -- timeout = 30000, -- timeout in milliseconds
        __inherited_from = "openai",
        model = "openai/gpt-4o-mini",
        endpoint = "https://openrouter.ai/api/v1",
        api_key_name = "cmd:bw get notes openrouter-api-key",
        disable_tools = false,
        timeout = 60, -- timeout in milliseconds
        max_tokens = 16384,
      },
      openrouter_claude = {
        __inherited_from = "openai",
        endpoint = "https://openrouter.ai/api/v1",
        api_key_name = "cmd:bw get notes openrouter-api-key",
        model = "anthropic/claude-3.7-sonnet",
        -- disable_tools = true,
        max_tokens = 16384,
        timeout = 30000, -- timeout in milliseconds
      },
      openrouter_gemini_flash = {
        __inherited_from = "openai",
        endpoint = "https://openrouter.ai/api/v1",
        api_key_name = "cmd:bw get notes openrouter-api-key",
        model = "google/gemini-2.5-flash-preview",
        disable_tools = false,
      },
      openrouter_deepseekv3_0324_free = {
        __inherited_from = "openai",
        endpoint = "https://openrouter.ai/api/v1",
        api_key_name = "cmd:bw get notes openrouter-api-key",
        model = "deepseek/deepseek-chat-v3-0324:free",
        disable_tools = true,
        timeout = 30000, -- timeout in milliseconds
      },
      openrouter_deepseekv3_0324 = {
        __inherited_from = "openai",
        endpoint = "https://openrouter.ai/api/v1",
        api_key_name = "cmd:bw get notes openrouter-api-key",
        model = "deepseek/deepseek-chat-v3-0324",
        disable_tools = false,
        timeout = 30000, -- timeout in milliseconds
      },
      gemini_25_pro_preview_0325 = {
        __inherited_from = "openai",
        endpoint = "https://openrouter.ai/api/v1",
        api_key_name = "cmd:bw get notes openrouter-api-key",
        model = "google/gemini-2.5-pro-preview-03-25",
        disable_tools = false,
        timeout = 60, -- timeout in milliseconds
      },
    },
  },
  web_search_engine = {
    provider = "tavily",
  },
  -- slash_commands = {
  --   "clear",
  --   "mcp",
  -- },

  -- XXX: mcp hub: 1. disable some tools 2. load tools from mcphub
  -- The custom_tools type supports both a list and a function that returns a list.
  disabled_tools = {
    "list_files",
    "search_files",
    "read_file",
    "create_file",
    "rename_file",
    "delete_file",
    "create_dir",
    "rename_dir",
    "delete_dir",
    "bash",
  },
  -- The system_prompt type supports both a string and a function that returns a string. Using a function here allows dynamically updating the prompt with mcphub
  system_prompt = function()
    vim.notify("Avante: Test Test", vim.log.levels.INFO)
    local hub = require("mcphub").get_hub_instance()
    -- hub.add_prompts
    local prompts = hub:get_active_prompts()
    vim.notify("Avante: " .. vim.inspect(prompts), vim.log.levels.INFO)
    return prompts
  end,
  custom_tools = function()
    return {
      require("mcphub.extensions.avante").mcp_tool(),
    }
  end,
  -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
  build = "make",
  -- build = "powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false" -- for windows
  dependencies = {
    "nvim-treesitter/nvim-treesitter",
    "stevearc/dressing.nvim", -- missing
    "nvim-lua/plenary.nvim",
    "MunifTanjim/nui.nvim",
    --- optional dependencies chosen ---
    "echasnovski/mini.icons", -- or nvim-tree/nvim-web-devicons
    "echasnovski/mini.pick", -- for file_selector provider mini.pick
    --- The below dependencies are optional,
    {
      -- support for image pasting
      "HakonHarnes/img-clip.nvim",
      event = "VeryLazy",
      opts = {
        -- recommended settings
        default = {
          embed_image_as_base64 = false,
          prompt_for_file_name = false,
          drag_and_drop = {
            insert_mode = true,
          },
          -- required for Windows users
          use_absolute_path = true,
        },
      },
      keys = {
        -- suggested keymap
        { "<leader>p", "<cmd>PasteImage<cr>", desc = "Paste image from system clipboard" },
      },
    },
    {
      -- Make sure to set this up properly if you have lazy=true
      "MeanderingProgrammer/render-markdown.nvim",
      opts = {
        file_types = { "markdown", "Avante" },
      },
      ft = { "markdown", "Avante" },
    },
  },
}
